[{"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\index.js":"1","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\App.js":"2","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championcard\\championcard.js":"3","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championstatcard\\championstatcard.js":"4","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championskillcard\\championskillcard.js":"5","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championitemcard\\championitemcard.js":"6","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calculationarea\\calculationarea.js":"7","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcskill\\calcskill.js":"8","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcbasic\\calcbasic.js":"9","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runeprecision\\runeprecision.js":"10","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runedomination\\runedomination.js":"11","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runesorcery\\runesorcery.js":"12","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runeresolve\\runeresolve.js":"13","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runeinspiration\\runeinspiration.js":"14","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runeminor\\runeminor.js":"15","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcdamagerunes\\calcdamagerunes.js":"16","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcsummoners\\calcsummoners.js":"17","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championbuffs\\championbuffs.js":"18","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\data\\champion.js":"19","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\characterselect\\characterselect.js":"20","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\itemmodal\\itemmodal.js":"21","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\data\\items.js":"22","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcitem\\calcitem.js":"23","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\savemodal\\savemodal.js":"24","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\savedchampion\\savedchampion.js":"25","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\data\\functions.js":"26","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\skilleditor\\skilleditor.js":"27"},{"size":219,"mtime":1609547639230,"results":"28","hashOfConfig":"29"},{"size":15029,"mtime":1616186834391,"results":"30","hashOfConfig":"29"},{"size":11138,"mtime":1615759160991,"results":"31","hashOfConfig":"29"},{"size":357,"mtime":1610064970856,"results":"32","hashOfConfig":"29"},{"size":1183,"mtime":1615126233189,"results":"33","hashOfConfig":"29"},{"size":1248,"mtime":1615127436832,"results":"34","hashOfConfig":"29"},{"size":3712,"mtime":1615758727693,"results":"35","hashOfConfig":"29"},{"size":2812,"mtime":1616021512569,"results":"36","hashOfConfig":"29"},{"size":4143,"mtime":1616026194478,"results":"37","hashOfConfig":"29"},{"size":5118,"mtime":1615121821028,"results":"38","hashOfConfig":"29"},{"size":5446,"mtime":1614393409277,"results":"39","hashOfConfig":"29"},{"size":4588,"mtime":1614387656244,"results":"40","hashOfConfig":"29"},{"size":4551,"mtime":1614387801663,"results":"41","hashOfConfig":"29"},{"size":4800,"mtime":1614389308498,"results":"42","hashOfConfig":"29"},{"size":3238,"mtime":1614393592654,"results":"43","hashOfConfig":"29"},{"size":7339,"mtime":1615213813292,"results":"44","hashOfConfig":"29"},{"size":1917,"mtime":1615126708226,"results":"45","hashOfConfig":"29"},{"size":3121,"mtime":1614395334438,"results":"46","hashOfConfig":"29"},{"size":364614,"mtime":1616020490527,"results":"47","hashOfConfig":"29"},{"size":1109,"mtime":1615221031677,"results":"48","hashOfConfig":"29"},{"size":5171,"mtime":1615309141627,"results":"49","hashOfConfig":"29"},{"size":26600,"mtime":1615758092118,"results":"50","hashOfConfig":"29"},{"size":2941,"mtime":1615667888119,"results":"51","hashOfConfig":"29"},{"size":4315,"mtime":1615388775145,"results":"52","hashOfConfig":"29"},{"size":1319,"mtime":1615127344023,"results":"53","hashOfConfig":"29"},{"size":36383,"mtime":1616025991733,"results":"54","hashOfConfig":"29"},{"size":4232,"mtime":1616199954612,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"145epo2",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\index.js",[],["112","113"],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\App.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championcard\\championcard.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championstatcard\\championstatcard.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championskillcard\\championskillcard.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championitemcard\\championitemcard.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calculationarea\\calculationarea.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcskill\\calcskill.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcbasic\\calcbasic.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runeprecision\\runeprecision.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runedomination\\runedomination.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runesorcery\\runesorcery.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runeresolve\\runeresolve.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runeinspiration\\runeinspiration.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\runeminor\\runeminor.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcdamagerunes\\calcdamagerunes.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcsummoners\\calcsummoners.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\championbuffs\\championbuffs.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\data\\champion.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\characterselect\\characterselect.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\itemmodal\\itemmodal.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\data\\items.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\calcitem\\calcitem.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\savemodal\\savemodal.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\savedchampion\\savedchampion.js",[],"C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\data\\functions.js",["114"],"import {ChampionData} from './champion';\r\nimport {ItemsData} from './items';\r\n\r\nconst runes = {\r\n    precision: {\r\n      key1: false,\r\n      key2: false,\r\n      key3: false,\r\n      key4: false,\r\n      node1: false,\r\n      node2: false,\r\n      node3: false,\r\n      node4: false,\r\n      node5: false,\r\n      node6: false,\r\n      node7: false,\r\n      node8: false,\r\n      node9: false\r\n    },\r\n    domination: {\r\n      key1: false,\r\n      key2: false,\r\n      key3: false,\r\n      key4: false,\r\n      node1: false,\r\n      node2: false,\r\n      node3: false,\r\n      node4: false,\r\n      node5: false,\r\n      node6: false,\r\n      node7: false,\r\n      node8: false,\r\n      node9: false,\r\n      node10: false\r\n    },\r\n    sorcery: {\r\n      key1: false,\r\n      key2: false,\r\n      key3: false,\r\n      node1: false,\r\n      node2: false,\r\n      node3: false,\r\n      node4: false,\r\n      node5: false,\r\n      node6: false,\r\n      node7: false,\r\n      node8: false,\r\n      node9: false\r\n    },\r\n    resolve: {\r\n      key1: false,\r\n      key2: false,\r\n      key3: false,\r\n      node1: false,\r\n      node2: false,\r\n      node3: false,\r\n      node4: false,\r\n      node5: false,\r\n      node6: false,\r\n      node7: false,\r\n      node8: false,\r\n      node9: false\r\n    },\r\n    inspiration: {\r\n      key1: false,\r\n      key2: false,\r\n      key3: false,\r\n      node1: false,\r\n      node2: false,\r\n      node3: false,\r\n      node4: false,\r\n      node5: false,\r\n      node6: false,\r\n      node7: false,\r\n      node8: false,\r\n      node9: false\r\n    },\r\n    minor: {\r\n      node1: false,\r\n      node2: false,\r\n      node3: false,\r\n      node4: false,\r\n      node5: false,\r\n      node6: false,\r\n      node7: false,\r\n      node8: false,\r\n      node9: false\r\n    }\r\n}\r\n\r\nconst buffs = {\r\n    elixIron: false,\r\n    elixWrath: false,\r\n    elixSorc: false,\r\n    baron: false,\r\n    inf1: false,\r\n    inf2: false,\r\n    mount1: false,\r\n    mount2: false\r\n};\r\n\r\nexport const cloneChampion = (championName) => {\r\n  if (ChampionData[championName] !== undefined){\r\n    const champion = ChampionData[championName];\r\n    const clonedChampion = {};\r\n\r\n    clonedChampion.runes = {};\r\n    clonedChampion.buffs = {};\r\n    clonedChampion.items = [{},{},{},{},{},{}];\r\n\r\n    // clones all keys from champion to cloned champion there is an abilities array but it's only holding static objects\r\n    for (let key in champion){\r\n      clonedChampion[key] = champion[key]\r\n    }\r\n\r\n    for (let runepage in runes) {\r\n      clonedChampion.runes[runepage] = {};\r\n      for (let node in runes[runepage]) {\r\n        // default values for all rune nodes - false\r\n        clonedChampion.runes[runepage][node] = runes[runepage][node];\r\n      }\r\n    }\r\n\r\n    for (let buff in buffs){\r\n      // default values for all buffs - false\r\n      clonedChampion.buffs[buff] = buffs[buff];\r\n    }\r\n\r\n    return clonedChampion;\r\n  }\r\n  else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nconst duplicateBuffs = (buffs) => {\r\n  let dupe = {};\r\n  for (let buff in buffs){\r\n    dupe[buff] = buffs[buff];\r\n  }\r\n  return dupe;\r\n}\r\n\r\nconst duplicateRunes = (runes) => {\r\n  let dupe = {};\r\n  for (let page in runes){\r\n    dupe[page] = {};\r\n    for (let node in runes[page]){\r\n      dupe[page][node] = runes[page][node];\r\n    }\r\n  }\r\n  return dupe;\r\n}\r\n\r\nconst duplicateChampion = (championData) => {\r\n  if (championData.name === \"target\") {return championData};\r\n\r\n  const dupe = {};\r\n  for (let key in championData) {\r\n    if (typeof championData[key] === \"string\" || typeof championData[key] === \"number\" || typeof championData[key] === \"boolean\") {\r\n      dupe[key] = championData[key]\r\n    }\r\n    else if (key === \"abilities\" || key === \"itemEffects\" || key === \"items\"){\r\n      dupe[key] = championData[key]\r\n    }\r\n    else if (key === \"runes\") {\r\n      dupe.runes = duplicateRunes(championData[key]);\r\n    }\r\n    else if (key === \"buffs\") {\r\n      dupe.buffs = duplicateBuffs(championData[key]);\r\n    }\r\n  }\r\n  return dupe;\r\n}\r\n\r\nconst getBaseStats = (champ,lv, stat) => {\r\n  const capitalizedstat = stat.charAt(0).toUpperCase() + stat.slice(1);\r\n  return ChampionData[champ][stat] + (ChampionData[champ][`lv${capitalizedstat}`] * (lv-1));\r\n}\r\n\r\nexport const applyBuffs = (allyChampionData, enemyChampionData) => {\r\n  const dupeAllyChampion = duplicateChampion(allyChampionData);\r\n  const dupeEnemyChampion = duplicateChampion(enemyChampionData);\r\n  const dupedChampionArray = [dupeAllyChampion, dupeEnemyChampion];\r\n\r\n  // Apply buff from potions / baron\r\n  dupedChampionArray.forEach(champ => {\r\n    if (champ.name === \"target\") return;\r\n    // set multipliers to be used before returning\r\n    champ.adMultiplier = 1;\r\n    champ.apMultiplier = 1;\r\n    champ.armorMultiplier = 1;\r\n    champ.resistMultiplier = 1;\r\n    for (let buff in champ.buffs) {\r\n      if (champ.buffs[buff] === true){\r\n        switch(buff){\r\n          case \"elixIron\":\r\n            champ.hp += 300;\r\n            break;\r\n          case \"elixSorc\":\r\n            champ.ap += 50;\r\n            break;\r\n          case \"elixWrath\":\r\n            champ.attack += 30;\r\n            break;\r\n          case \"baron\":\r\n            champ.attack += 19;\r\n            champ.ap += 32;\r\n            break;\r\n          case \"inf1\":\r\n            champ.adMultiplier += 0.04;\r\n            champ.apMultiplier += 0.04;\r\n            break;\r\n          case \"inf2\":\r\n            champ.adMultiplier += 0.08;\r\n            champ.apMultiplier += 0.08;\r\n            break;\r\n          case \"mount1\":\r\n            champ.adMultiplier += 0.06;\r\n            champ.apMultiplier += 0.06;\r\n            break;\r\n          case \"mount2\":\r\n            champ.adMultiplier += 0.12;\r\n            champ.apMultiplier += 0.12;\r\n            break;\r\n          default: \r\n            break;\r\n        }\r\n      }\r\n    }\r\n  })\r\n\r\n  // initialize item effects array for next foreach loop\r\n  dupedChampionArray[0].itemEffects = [];\r\n  dupedChampionArray[1].itemEffects = [];\r\n\r\n  dupedChampionArray.forEach((champ, idx) => {\r\n    if (champ.name === \"target\") return;\r\n    champ.items.forEach(item => {\r\n      if (item.attack !== undefined) {\r\n        if (item.attack.type === \"buff\" && champ.itemEffects.filter(x => x.name === item.attack.name && x.type === \"buff\").length === 0) {\r\n          champ.itemEffects.push({...item.attack})\r\n        }\r\n      }\r\n\r\n      if (item.debuff !== undefined && idx === 0){\r\n        if (item.debuff.type === \"debuff\" && dupedChampionArray[1].itemEffects.filter(x => x.name === item.debuff.name && x.type === \"debuff\").length === 0)  {\r\n          dupedChampionArray[1].itemEffects.push({...item.debuff})\r\n        }\r\n      }\r\n      else if (item.debuff !== undefined && idx === 1) {\r\n        if (item.debuff.type === \"debuff\" && dupedChampionArray[0].itemEffects.filter(x => x.name === item.debuff.name && x.type === \"debuff\").length === 0)  {\r\n          dupedChampionArray[0].itemEffects.push({...item.debuff})\r\n        }\r\n      }\r\n      \r\n\r\n      if (item.buff !== undefined) {\r\n        if (item.buff.type === \"buff\" && champ.itemEffects.filter(x => x.name === item.buff.name && x.type === \"buff\").length === 0) {\r\n          champ.itemEffects.push({...item.buff})\r\n        }\r\n      }\r\n    })\r\n  })\r\n\r\n  // Champion specific buffs\r\n  // At this point I was more confortable with using if else statement if there is a performance issue switch is apparently slightly faster.\r\n  dupedChampionArray.forEach((champ, idx) => {\r\n    champ.onAttack = [];\r\n    let enemyChamp = idx === 0 ? dupedChampionArray[1] : dupedChampionArray[0];\r\n    if (champ.name === \"aatrox\"){\r\n      if (champ.worldEnder === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        champ.attack = abilityLv >= 0 ? champ.attack * [1.2,1.3,1.4][abilityLv] : champ.attack;\r\n      }\r\n    }\r\n    else if (champ.name === \"alistar\"){\r\n      if (champ.unbreakableWill === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        champ.dmgReductionPercentage = abilityLv >= 0 ? [55,65,75][abilityLv] : champ.dmgReductionPercentage;\r\n      }\r\n    }\r\n    else if (champ.name === \"amumu\"){\r\n      if (champ.tantrum){\r\n        let abilityLv = champ.ability3 - 1;\r\n        let armorScale = (champ.armor - getBaseStats(\"amumu\", champ.lv, \"armor\")) * 0.03;\r\n        let resistScale = (champ.armor - getBaseStats(\"amumu\", champ.lv, \"resist\")) * 0.03;\r\n        champ.physReductionFlat = abilityLv >= 0 ? [2,4,6,8,10][abilityLv] + resistScale + armorScale : champ.physReductionFlat;\r\n      }\r\n    }\r\n    else if (champ.name === \"braum\"){\r\n      if (champ.standBehindMe === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        let baseArmor = getBaseStats(\"braum\", champ.lv, \"armor\");\r\n        let baseResist = getBaseStats(\"braum\", champ.lv, \"resist\");\r\n        champ.armor = abilityLv >= 0 ? champ.armor + ([10,14,18,22,26][abilityLv] + ((champ.armor - baseArmor) * .36)) : champ.armor;\r\n        champ.resist = abilityLv >= 0 ? champ.resist + ([10,14,18,22,26][abilityLv] + ((champ.resist - baseResist) * .36)) : champ.resist;\r\n      }\r\n\r\n      if (champ.unbreakable === true){\r\n        let abilityLv = champ.ability3 - 1;\r\n        champ.dmgReductionPercentage = abilityLv >= 0 ? [30,32.5,35,37.5,40][abilityLv] : champ.dmgReductionPercentage;\r\n      }\r\n    }\r\n    else if (champ.name === \"darius\"){\r\n      if (champ.apprehend === true) {\r\n        let abilityLv = champ.ability3 - 1;\r\n        champ.arpen = abilityLv >= 0 ? [15,20,25,30,35][abilityLv] + champ.arpen : champ.arpen;\r\n      }\r\n    }\r\n    else if (champ.name === \"drmundo\"){\r\n      if (champ.masochism === true){\r\n        let abilityLv = champ.ability3 - 1;\r\n        champ.attack += abilityLv >= 0 ? [40,55,70,85,100][abilityLv] : 0\r\n      }\r\n    }\r\n    else if (champ.name === \"evelynn\"){\r\n      if (champ.allure === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        enemyChamp.resist *= abilityLv >= 0 ? [.75,.725,.7,.675,.65][abilityLv] : 1;\r\n      }\r\n    }\r\n    else if (champ.name === \"fizz\"){\r\n      if (champ.nimble === true){\r\n        champ.dmgReductionFlat = 4 + (champ.ap * 0.01)\r\n      }\r\n    }\r\n    else if (champ.name === \"galio\"){\r\n      if (champ.durand === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        let apScale = champ.ap * 0.05;\r\n        let resistScale = (champ.resist - getBaseStats(\"galio\", champ.lv, \"resist\")) * 0.08;\r\n        champ.magicReductPercentage = abilityLv >= 0 ? [20,25,30,35,40][champ.abilityLv] + apScale + resistScale : champ.magicReductPercentage;\r\n        champ.physReductPercentage = champ.magicReductPercentage / 2;\r\n      }\r\n    }\r\n    else if (champ.name === \"garen\"){\r\n      if (champ.courage !== false && typeof champ.courage === \"number\"){\r\n        champ.armor = champ.armor + (0.25 * champ.courage) * (champ.courage === 120 ? 1.1 : 1);\r\n        champ.resist = champ.resist + (0.25 * champ.courage) * (champ.courage === 120 ? 1.1 : 1);\r\n      }\r\n    }\r\n    else if (champ.name === \"gragas\"){\r\n      if (champ.drunk === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        let apScale = champ.ap * 0.04;\r\n        champ.dmgReductionPercentage = abilityLv >= 0 ? [10,12,14,16,18][abilityLv] + apScale : champ.dmgReductionPercentage;\r\n      }\r\n    }\r\n    else if (champ.name === \"graves\"){\r\n      if (champ.trueGrit !== false && typeof champ.trueGrit === \"number\"){\r\n        let abilityLv = champ.ability3 - 1;\r\n        let perStack = [6,9,12,15,18][abilityLv];\r\n        champ.armor += abilityLv >= 0 ? perStack * champ.trueGrit : champ.armor;\r\n      }\r\n    }\r\n    else if (champ.name === \"jarvan\"){\r\n      if (champ.dragonstrike === true){\r\n        let abilityLv = champ.ability1 - 1;\r\n\r\n        enemyChamp.armor *= abilityLv >= 0 ? [.9,.86,.82,.78,.74][abilityLv] : 1;\r\n      }\r\n    }\r\n    else if (champ.name === \"kassadin\"){\r\n      if (champ.spellshield === true){\r\n        champ.magicReductPercentage = 15;\r\n      }\r\n    }\r\n    else if (champ.name === \"leona\"){\r\n      if (champ.sunshield === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        if (abilityLv >= 0){\r\n          let armorScale = (champ.armor - getBaseStats(\"leona\", champ.lv, \"armor\")) * .2;\r\n          let resistScale = (champ.resist - getBaseStats(\"leona\", champ.lv, \"resist\")) * .2;\r\n          let lvScale = [20,25,30,35,40][abilityLv];\r\n          champ.resist += lvScale + resistScale;\r\n          champ.armor += lvScale + armorScale;\r\n        }\r\n      }\r\n    }\r\n    else if (champ.name === \"jayce\"){\r\n      if (champ.meleeForm === true ){\r\n        let bonusResists = [5,15,25,35][0 + Math.floor((champ.lv - 1) / 5)]\r\n        champ.armor = champ.armor + bonusResists;\r\n        champ.resist = champ.resist + bonusResists;\r\n      }\r\n    }\r\n    else if (champ.name === \"jax\"){\r\n      if (champ.grandmaster === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n\r\n        if (abilityLv >= 0){\r\n          let bonusAdScale = champ.attack - getBaseStats(\"jax\", champ.lv, \"attack\");\r\n          let apScale = champ.ap * 0.2;\r\n          let adScale = bonusAdScale * 0.5;\r\n          let bonusResists = [30,50,70][abilityLv];\r\n          champ.armor +=  bonusResists + adScale;\r\n          champ.resist +=  bonusResists + apScale;\r\n        }\r\n      }\r\n    }\r\n    else if (champ.name === \"kogmaw\"){\r\n      if (champ.spittle === true){\r\n        let abilityLv = champ.ability1 - 1;\r\n        if (abilityLv >= 0){\r\n          let multiplier = [.8,.78,.76,.74,.72][abilityLv];\r\n  \r\n          enemyChamp.armor *= multiplier;\r\n          enemyChamp.resist *= multiplier;\r\n        }\r\n      }\r\n    }\r\n    else if (champ.name === \"malphite\"){\r\n      if (champ.solidrock === true && champ.graniteshield === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        champ.armor = abilityLv >= 0 ? champ.armor * [1.3,1.45,1.6,1.75,1.9][abilityLv] : champ.armor\r\n      }\r\n      else if (champ.solidrock === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        champ.armor = abilityLv >= 0 ? champ.armor * [1.1,1.15,1.2,1.25,1.3][abilityLv] : champ.armor\r\n      }\r\n    }\r\n    else if (champ.name === \"mordekaiser\"){\r\n      if (champ.deathgrasp){\r\n        let abilityLv = champ.ability3 - 1;\r\n        champ.mpen += abilityLv >= 0 ? [5,7.5,10,12.5,15][abilityLv] : 0;\r\n      }\r\n\r\n      if (champ.deathrealm === true){\r\n        let lostAd = 0.1 * enemyChamp.attack;\r\n        let lostAp = 0.1 * enemyChamp.ap;\r\n        let lostArmor = 0.1 * enemyChamp.armor;\r\n        let lostResist = 0.1 * enemyChamp.resist;\r\n\r\n        enemyChamp.armor -= lostArmor;\r\n        enemyChamp.resist -= lostResist;\r\n        enemyChamp.ap -= lostAp;\r\n        enemyChamp.attack -= lostAd;\r\n\r\n        champ.armor += lostArmor;\r\n        champ.resist += lostResist;\r\n        champ.ap += lostAp;\r\n        champ.attack += lostAd;\r\n      }\r\n    }\r\n    else if (champ.name === \"nocturne\") {\r\n      if (champ.dusktrail === true){\r\n        let abilityLv = champ.ability1 - 1;\r\n        champ.attack = abilityLv >= 0 ? champ.attack + [20,30,40,50,60][abilityLv] : champ.attack;\r\n      }\r\n    }\r\n    else if (champ.name === \"orianna\"){\r\n      if (champ.protect === true){\r\n        let abilityLv = champ.ability3 - 1;\r\n      \r\n        if (abilityLv >= 0){\r\n          let bonusResists = [10,15,20,25,30][abilityLv];\r\n          champ.armor += bonusResists;\r\n          champ.resist += bonusResists;\r\n        }\r\n      }\r\n    }\r\n    else if (champ.name === \"olaf\"){\r\n      if (champ.berserker === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        champ.attack += abilityLv >= 0 ? [15,20,25][abilityLv] + (champ.attack * 0.3) : 0\r\n      }\r\n    }\r\n    else if (champ.name === \"poppy\"){\r\n      if (champ.steadfast === true){\r\n        champ.armor *= 1.1;\r\n        champ.resist *= 1.1;\r\n      }\r\n    }\r\n    else if (champ.name === \"pyke\"){\r\n      if (champ.drowned === true){\r\n        let bonusHp = champ.hp - getBaseStats(\"pyke\", champ.lv, \"hp\");\r\n        champ.hp = getBaseStats(\"pyke\", champ.lv, \"hp\");\r\n        champ.attack = champ.attack + Math.floor(bonusHp / 14);\r\n      }\r\n    }\r\n    else if (champ.name === \"riven\"){\r\n      if (champ.reforge === true){\r\n        champ.attack = champ.attack * 1.2;\r\n      }\r\n    }\r\n    else if (champ.name === \"rengar\"){\r\n      if (champ.trophies !== false && typeof champ.trophies === \"number\"){\r\n        let bonusAd = champ.attack - getBaseStats(\"rengar\", champ.lv, \"attack\");\r\n        champ.attack += champ.trophies >= 1 ? bonusAd * [1.01,1.04,1.09,1.16,1.25][champ.trophies - 1] : 0;\r\n      }\r\n    }\r\n    else if (champ.name === \"renekton\"){\r\n      if (champ.ascended === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        champ.hp = abilityLv >= 0 ? champ.hp + [250,500,750][abilityLv] : champ.hp;\r\n      }\r\n    }\r\n    else if (champ.name === \"nasus\"){\r\n      if (champ.spiritfire === true){\r\n        let abilityLv = champ.ability3 - 1;\r\n\r\n        enemyChamp.armor = abilityLv >= 0 ? enemyChamp.armor * [0.75,0.7,0.65,0.6,0.55][abilityLv] : enemyChamp.armor;\r\n      }\r\n\r\n      if (champ.godmode === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n\r\n        if (abilityLv >= 0){\r\n          let bonusResists = [40,55,70][abilityLv];\r\n          champ.armor += bonusResists;\r\n          champ.resist += bonusResists;\r\n          champ.hp += [300,450,600][abilityLv];\r\n        }\r\n        \r\n      }\r\n    }\r\n    else if (champ.name === \"rammus\"){\r\n      if (champ.defensecurl === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        \r\n        if (abilityLv >= 0){\r\n          let armorScale = champ.armor * [.6,.7,.8,.9,1][abilityLv];\r\n          let resistScale = champ.resist * [.3,.35,.4,.45,.5][abilityLv];\r\n          champ.armor += 30 + armorScale;\r\n          champ.resist += 10 + resistScale;\r\n        }\r\n      }\r\n    }\r\n    else if (champ.name === \"ryze\"){\r\n      if (champ.arcane === true){\r\n        let bonusMana = champ.mana - getBaseStats(\"ryze\", champ.lv, \"mana\");\r\n        let bonusAp = bonusMana * 0.05;\r\n        champ.ap += bonusAp\r\n      }\r\n    }\r\n    else if (champ.name === \"sejuani\"){\r\n      if (champ.frostarmor === true){\r\n        let armorScale = (champ.armor - getBaseStats(\"sejuani\", champ.lv, \"armor\")) * 0.5;\r\n        let resistScale = (champ.resist - getBaseStats(\"sejuani\", champ.lv, \"resist\")) * 0.5;\r\n        champ.armor += 10 + armorScale;\r\n        champ.resist += 10 + resistScale;\r\n      }\r\n    }\r\n    else if (champ.name === \"senna\"){\r\n      if (champ.absolation !== false && typeof champ.absolation === \"number\"){\r\n        champ.critDamage = champ.critDamage * 0.86;\r\n        champ.attack += champ.absolation * 0.75;\r\n        champ.critChance += Math.floor(champ.absolation / 20) * 10;\r\n      }\r\n    }\r\n    else if (champ.name === \"shyvanna\"){\r\n      if (champ.dragon !== false && typeof champ.dragon === \"number\"){\r\n        champ.armor += 5 + (5 * champ.dragon);\r\n        champ.resist += 5 + (5 * champ.dragon);\r\n\r\n      }\r\n\r\n      if (champ.dragondescent === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        champ.hp = abilityLv >= 0 ? champ.hp + [150,250,350][abilityLv] : champ.hp;\r\n      }\r\n    }\r\n    else if (champ.name === \"singed\"){\r\n      if (champ.insanity === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        if (abilityLv >= 0){\r\n          let bonusStats = [30,60,90][abilityLv];\r\n          champ.ap += bonusStats;\r\n          champ.armor += bonusStats;\r\n          champ.resist += bonusStats;\r\n        }\r\n      }\r\n    }\r\n    else if (champ.name === \"sion\"){\r\n      if (champ.healthboost !== false && typeof champ.healthboost === \"number\"){\r\n        champ.hp += champ.healthboost;\r\n      }\r\n    }\r\n    else if (champ.name === \"swain\"){\r\n      if (champ.demonic === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        champ.hp += abilityLv >= 0 ? [125,200,275][abilityLv] : 0\r\n      }\r\n    }\r\n    else if (champ.name === \"taric\"){\r\n      if (champ.tether === true){\r\n        let abilityLv = champ.ability2 - 1;\r\n        champ.armor *= abilityLv >= 0 ? [1.1,1.11,1.12,1.13,1.14][abilityLv] : 1\r\n      }\r\n    }\r\n    else if (champ.name === \"thresh\"){\r\n      if (champ.souls !== false && typeof champ.souls === \"number\"){\r\n        champ.armor += champ.souls * 0.75;\r\n        champ.ap += champ.souls * 0.75;\r\n      }\r\n    }\r\n    else if (champ.name === \"trundle\"){\r\n      if (champ.chomp === true){\r\n        let abilityLv = champ.ability1 - 1;\r\n        \r\n        if (abilityLv >= 0){\r\n          let attakincrease = [20,25,30,35,40][abilityLv];\r\n          champ.attack += attakincrease\r\n          enemyChamp.attack -= attakincrease / 2;\r\n        }\r\n      }\r\n\r\n      if (champ.trollking === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        if (abilityLv >= 0){\r\n          let armorLoss = enemyChamp.armor * 0.4;\r\n          let resistLoss = enemyChamp.resist * 0.4;\r\n\r\n          enemyChamp.armor -= armorLoss;\r\n          enemyChamp.resist -= resistLoss;\r\n\r\n          champ.armor += armorLoss;\r\n          champ.resist += resistLoss;\r\n        }\r\n      }\r\n    }\r\n    else if (champ.name === \"tryndamere\"){\r\n      if (champ.rage !== false &&  typeof champ.rage === \"number\"){\r\n        champ.critChance += Math.floor(champ.rage / 10) * 4;\r\n      }\r\n    }\r\n    else if (champ.name === \"vayne\"){\r\n      if (champ.finalhour === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        champ.ad += abilityLv >= 0 ? [35,50,65][abilityLv] : 0\r\n      }\r\n    }\r\n    else if (champ.name === \"veigar\"){\r\n      if (champ.evil !== false && typeof champ.evil === \"number\"){\r\n        champ.ap += champ.evil;\r\n      }\r\n    }\r\n    else if (champ.name === \"vi\"){\r\n      if (champ.dented === true){\r\n        enemyChamp.armor *= 0.8;\r\n      }\r\n    }\r\n    else if (champ.name === \"volibear\"){\r\n      if (champ.thunderbear === true){\r\n        let abilityLv = champ.ability4 - 1;\r\n        champ.hp += abilityLv >= 0 ? [200,400,600][abilityLv] : 0\r\n      }\r\n    }\r\n    else if (champ.name === \"wukong\"){\r\n      if (champ.stone !== false && typeof champ.stone === \"number\"){\r\n        let bonusArmor = 5 + (4 / 17 * (champ.lv - 1));\r\n        champ.armor += bonusArmor * (champ.stone + 1)\r\n      }\r\n\r\n      if (champ.crushing === true){\r\n        let abilityLv = champ.ability1 - 1;\r\n        enemyChamp.armor *= abilityLv >= 0 ? [.9,.85,.8,.75,.7][abilityLv] : 1\r\n      }\r\n    }\r\n    else if (champ.name === \"yasuo\"){\r\n      if (champ.wanderer === true){\r\n        champ.critChance *= 2.5;\r\n        champ.critDamage *= 0.9;\r\n        let bonusAd = champ.critChance > 100 ? (champ.critChance - 100) * 0.4 : 0;\r\n        champ.attack += bonusAd;\r\n      }\r\n    }\r\n    else if (champ.name === \"yone\"){\r\n      if (champ.hunter === true){\r\n        champ.critChance *= 2.5;\r\n        champ.critDamage *= 0.9;\r\n        let bonusAd = champ.critChance > 100 ? (champ.critChance - 100) * 0.4 : 0;\r\n        champ.attack += bonusAd;\r\n      }\r\n    }\r\n  })\r\n\r\n  // on attack items\r\n  dupedChampionArray.forEach((champ, idx) => {\r\n    let enemy = idx === 0 ? 1 : 0\r\n    champ.itemEffects.forEach(effect => {\r\n      switch(effect.name){\r\n        case \"ruinedking\":\r\n          champ.onAttack.push([\"BOTRK\", `${champ.range === \"melee\" ? \"melee\" : \"ranged\"}`, \"blade of the ruined king\"]);\r\n          break;\r\n        case \"fray\":\r\n          champ.onAttack.push([\"WITS\", (15 + 65 / 17 * (champ.lv - 1)), \"magical\", \"wit's end\"])\r\n          break;\r\n        case \"nashors\":\r\n          // will push later to ensure ap from deathcap is calculated\r\n          champ.hasNashors = true;\r\n          break;\r\n        case \"recurve\":\r\n          champ.onAttack.push([\"RECURVE\", 15,\"physical\", \"recurve bow\"])\r\n          break;\r\n        case \"titanic\":\r\n          champ.onAttack.push([\"TITANIC\", 5 + (champ.hp * 0.015), \"physical\", \"titanic hydra\"])\r\n          break;\r\n        case \"wrath\":\r\n          champ.onAttack.push([\"RAGEKNIFE\", (champ.critChance >= 100 ? 175 : champ.critChance * 1.75), \"physical\", \"rageknife\"])\r\n          champ.critChance = 0;\r\n          break;\r\n        case \"wrath2\":\r\n          champ.onAttack.push([\"RAGEBLADE\", (champ.critChance >= 100 ? 200 : champ.critChance * 2), \"physical\", \"rageblade\"])\r\n          champ.critChance = 0;\r\n          break;\r\n        case \"deathcap\":\r\n          champ.apMultiplier += 0.35;\r\n          break;\r\n        case \"infinity\":\r\n          champ.infinity = champ.critChance >= 60;\r\n          break;\r\n        case \"rocksolid\":\r\n          champ.onAttack.push([\"ROCKSOLID\", (5 * (dupedChampionArray[enemy].hp / 1000)).toFixed(0), \"true\", \"rocksolid\"]);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    })\r\n  })\r\n\r\n  // champ final stats\r\n  dupedChampionArray.forEach((champ) => {\r\n    champ.attack *= champ.adMultiplier;\r\n    champ.ap *= champ.apMultiplier;\r\n    champ.armor *= champ.armorMultiplier;\r\n    champ.resist *= champ.resistMultiplier;\r\n    if ((champ.wanderer === true || champ.hunter === true) && champ.infinity){\r\n      champ.critDamage += (35 * 0.9);\r\n    }\r\n    else if (champ.infinity){\r\n      champ.critDamage += 35;\r\n    }\r\n\r\n    if (champ.hasNashors){\r\n      champ.onAttack.push([\"NASHOR\", (15 + (champ.ap * 0.2)), \"magical\", \"nashor's tooth\"])\r\n    }\r\n\r\n    let abilityScale = 0;\r\n    let apScale = 0;\r\n    let bonusAd = 0;\r\n    let adScale = 0;\r\n\r\n    // champion specific on attack\r\n    switch(true){\r\n      case ((champ.name === \"masteryi\") && (champ.wuju === true) && (champ.ability3 > 0)):\r\n        abilityScale = [20,30,40,50,60][champ.ability3 - 1];\r\n        bonusAd = champ.attack - getBaseStats(\"masteryi\", champ.lv, \"attack\");\r\n        champ.onAttack.push([\"WUJU\", (abilityScale + bonusAd * 0.35),\"true\", \"wuju style\"]);\r\n        break;\r\n      case ((champ.name === \"teemo\") && (champ.poison === true) && (champ.ability3 > 0)):\r\n        abilityScale = [10,20,30,40,50][champ.ability3 - 1];\r\n        apScale = champ.ap * 0.3;\r\n        champ.onAttack.push([\"POISON\", (abilityScale + apScale),\"magical\", \"poison dart\"]);\r\n        break;\r\n      case ((champ.name === \"varus\") && (champ.blighted === true) && (champ.ability2 > 0)):\r\n        abilityScale = [7,8,9,10,11][champ.ability3 - 1];\r\n        apScale = champ.ap * 0.25;\r\n        champ.onAttack.push([\"BLIGHT\", (abilityScale + apScale),\"magical\", \"blighted arrow\"]);\r\n        break;\r\n      case ((champ.name === \"warwick\") && (champ.hungry === true)):\r\n        abilityScale = 10 + (2 * champ.lv);\r\n        adScale = (champ.attack - getBaseStats(\"masteryi\", champ.lv, \"attack\")) * 0.15;\r\n        apScale = champ.ap * 0.1;\r\n        champ.onAttack.push([\"WARWICK\", (abilityScale + apScale + adScale),\"magical\", \"warwick passive\"]);\r\n        break;\r\n      case ((champ.name === \"irelia\") && (champ.ionianFervor === true)):\r\n        abilityScale = 12 + (3 * champ.lv);\r\n        adScale = (champ.attack - getBaseStats(\"masteryi\", champ.lv, \"attack\"))*0.25;\r\n        champ.onAttack.push([\"FERVOR\", (abilityScale + adScale),\"magical\", \"ionian fervor\"]);\r\n        break;\r\n      case ((champ.name === \"orianna\") && (champ.cog === true)):\r\n        abilityScale = 10 + (8 * (Math.floor(champ.lv / 3)));\r\n        apScale = champ.ap * 0.15;\r\n        champ.onAttack.push([\"COGWORK\", (abilityScale + apScale),\"magical\", \"cogs\"]);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n\r\n  return dupedChampionArray;\r\n}\r\n\r\nconst calculateDamage = (totalDamage, damageType, ally, enemy) => {\r\n  // is probably more efficient to implement this directly into the functions that need it but until the app is too slow will leave this here.\r\n  // as some functions will need to call this multiple times so recalculating the enemy res etc... would be kind of wasted\r\n  // a solution could be to have this calculate all the resistences and just return an object holding those values but theres almost no\r\n  // difference between that and just implementing directly using the enemy object. it would be cleaner though\r\n\r\n  // the only function that currently calls this multiple times is the calculatebasic function.\r\n  let damage = totalDamage;\r\n  if (typeof enemy.dmgReductionFlat === \"number\"){\r\n    // fizz is currently the only champion able to obtain this stat\r\n    damage -= enemy.dmgReductionFlat;\r\n  }\r\n\r\n  if (damageType === \"physical\"){\r\n    const eArmor = enemy.armor * (1 - (ally.arpen / 100)) - (ally.lethality * (0.6 + 0.4 * ally.lv / 18));\r\n    let enemyArmorMultiplier = 100/(100+eArmor);\r\n    damage *= enemyArmorMultiplier;\r\n    if (typeof enemy.dmgReductionPercentage === \"number\"){\r\n      damage = damage * ((100 - enemy.dmgReductionPercentage) / 100)\r\n    }\r\n\r\n    if (typeof enemy.physReductPercentage === \"number\"){\r\n      damage = damage * ((100 - enemy.physReductPercentage) / 100)\r\n    }\r\n\r\n    if (typeof enemy.physReductionFlat === \"number\"){\r\n      // so far the only character with this stat is amumu and his is calculated post mitigation which is why this is here.\r\n      damage -= enemy.physReductionFlat;\r\n    }\r\n\r\n    return damage;\r\n  }\r\n  else if (damageType === \"magical\"){\r\n    const eResist = enemy.resist * (1 - (ally.mpen / 100)) - ally.flatMPen;\r\n    let enemyResistMultiplier = 100/(100+eResist);\r\n    damage *= enemyResistMultiplier;\r\n    if (typeof enemy.dmgReductionPercentage === \"number\"){\r\n      damage = damage * ((100 - enemy.dmgReductionPercentage) / 100)\r\n    }\r\n\r\n    if (typeof enemy.magicReductPercentage === \"number\"){\r\n      damage = damage * ((100 - enemy.magicReductPercentage) / 100)\r\n    }\r\n\r\n    return damage;\r\n  }\r\n  else if (damageType === \"true\"){\r\n    return totalDamage;\r\n  }\r\n  else {\r\n    return 0\r\n  }\r\n}\r\n\r\nconst calculateOnAttack = (ally, enemy) => {\r\n  let totalDamage = 0;\r\n  let blade = false;\r\n  if (ally.onAttack !== undefined && Array.isArray(ally.onAttack)){\r\n    ally.onAttack.forEach(attack => {\r\n      switch (attack[0]) {\r\n        case \"ROCKSOLID\":\r\n          totalDamage -= attack[1];\r\n          break;\r\n        case \"BOTRK\":\r\n          blade = true;\r\n          break;\r\n        default:\r\n          totalDamage += calculateDamage(attack[1], attack[2], ally, enemy);\r\n          break;\r\n      }\r\n    })\r\n  }\r\n  return [totalDamage, blade];\r\n}\r\n\r\nexport const calculateBasic = (ally, enemy) => {\r\n  const damageValues = {\r\n    basic: 0,\r\n    normal: 0,\r\n    normalPercentage: 0,\r\n    normalCount: 0,\r\n    crit: 0,\r\n    critPercentage: 0,\r\n    critCount: 0,\r\n    average: 0,\r\n    averagePercentage: 0,\r\n    averageCount: 0,\r\n    armorMultiplier: 0,\r\n    resistMultiplier: 0,\r\n    items: []\r\n  }\r\n\r\n  const eArmor = enemy.armor * (1 - (ally.arpen / 100)) - (ally.lethality * (0.6 + 0.4 * ally.lv / 18));\r\n  damageValues.armorMultiplier = 100/(100+eArmor);\r\n\r\n  const eResist = enemy.resist * (1 - (ally.mpen / 100)) - ally.flatMPen;\r\n  damageValues.resistMultiplier = 100/(100+eResist);\r\n\r\n  let [totalOnAttackDamage, ruinedking] = calculateOnAttack(ally, enemy);\r\n  ruinedking = ruinedking === false ? 0 : ally.range === \"melee\" ? 0.1 : 0.06;\r\n\r\n  damageValues.basic = ally.attack;\r\n  damageValues.normal = calculateDamage(ally.attack, \"physical\", ally, enemy) + totalOnAttackDamage;\r\n  damageValues.crit = calculateDamage(ally.attack * (ally.critDamage / 100), \"physical\", ally, enemy) + totalOnAttackDamage;\r\n  \r\n  if (ally.critChance === 0){\r\n    damageValues.average = damageValues.normal;\r\n  }\r\n  else if (ally.critChance === 100){\r\n    damageValues.average = damageValues.crit;\r\n  }\r\n  else {\r\n    let averageDamage = parseInt(damageValues.basic) + ((damageValues.crit - damageValues.normal)/100) * ally.critChance;\r\n    damageValues.average = calculateDamage(averageDamage, \"physical\", ally, enemy) + totalOnAttackDamage;\r\n  }\r\n\r\n\r\n  damageValues.normalPercentage = (damageValues.normal / enemy.hp) * 100\r\n  damageValues.critPercentage = (damageValues.crit / enemy.hp) * 100\r\n  damageValues.averagePercentage = (damageValues.average / enemy.hp) * 100\r\n\r\n  for (let x = enemy.hp; x > 0;){\r\n    damageValues.normalCount += 1;\r\n    let ruinedkingdamage = ruinedking !== 0 ? calculateDamage(x * ruinedking, \"physical\", ally, enemy) : 0;\r\n    x -= damageValues.normal + ruinedkingdamage;\r\n  }\r\n\r\n  for (let y = enemy.hp; y > 0;){\r\n    damageValues.critCount += 1;\r\n    let ruinedkingdamage = y * ruinedking;\r\n    y -= damageValues.crit + ruinedkingdamage;\r\n  }\r\n\r\n  for (let z = enemy.hp; z > 0;){\r\n    damageValues.averageCount += 1;\r\n    let ruinedkingdamage = z * ruinedking;\r\n    z -= damageValues.average + ruinedkingdamage;\r\n  }\r\n\r\n  damageValues.items = ally.onAttack;\r\n\r\n  return damageValues;\r\n}\r\n\r\nexport const calculateSkill = (ally, enemy, skill, skillLv) => {\r\n  let bonusAd = ally.attack - ally.baseAttack - (ally.lvAttack * (ally.lv - 1))\r\n  let ap = ally.ap;\r\n\r\n  // Return object, contains all values\r\n  const skillValues = {\r\n    damageType: skill.damage,\r\n    note: skill.note,\r\n    damageValues: {},\r\n    type: skill.type,\r\n    cooldown: 0\r\n  };\r\n\r\n  switch(skill.damage){\r\n    case \"physical\":\r\n      skillValues.multiplier = 100/(100+(enemy.armor * (1 - (ally.arpen / 100)) - (ally.lethality * (0.6 + 0.4 * ally.lv / 18))));\r\n      break;\r\n    case \"magical\":\r\n      skillValues.multiplier = 100/(100+(enemy.resist * (1 - (ally.mpen / 100)) - ally.flatMPen));\r\n      break;\r\n    case \"true\":\r\n      skillValues.multiplier = 1;\r\n      break;\r\n    default:\r\n      skillValues.multiplier = 0;\r\n      break;\r\n  }\r\n\r\n  skillValues[\"damageValues\"][\"level\"] = skill.lvScale !== undefined ? skill.lvScale[0] + ((skill.lvScale[1] - skill.lvScale[0]) / 17) * (ally.lv - 1) : 0;\r\n  skillValues[\"damageValues\"][\"ap\"] = (skill.ap !== 0 && skill.ap !== undefined) ? (Array.isArray(skill.ap) ? ap * (skill.ap[skillLv] / 100) : ap * (skill.ap / 100)) : 0;\r\n  skillValues[\"damageValues\"][\"ad\"] = (skill.ad !== 0 && skill.ad !== undefined) ? (Array.isArray(skill.ad) ? ally.ad * (skill.ad[skillLv] / 100) : ally.ad * (skill.ad / 100)) : 0;\r\n  skillValues[\"damageValues\"][\"bonus ad\"] = (skill.bAd !== 0 && skill.bAd !== undefined) ? (Array.isArray(skill.bAd) ? bonusAd * (skill.bAd[skillLv] / 100) : bonusAd * (skill.bAd / 100)) : 0;\r\n  skillValues[\"damageValues\"][\"max hp\"] = (skill.mhp !== 0 && skill.mhp !== undefined) ? (Array.isArray(skill.mhp) ? ally.hp * (skill.mhp[skillLv] / 100) : ally.hp * (skill.mhp / 100)) : 0;\r\n  skillValues[\"damageValues\"][\"enemy max hp\"] = (skill.emhp !== 0 && skill.emhp !== undefined) ? (Array.isArray(skill.emhp) ? enemy.hp * (skill.emhp[skillLv] / 100) : enemy.hp * (skill.emhp / 100)) : 0;\r\n\r\n  if (skill.emhpScale !== 0 && skill.emhpScale !== undefined){\r\n    if (skill.emhpScale[2] === \"ap\") {\r\n      const times = ap / skill.emhpScale[1];\r\n      const multiplier = skill.emhpScale[0] * times;\r\n      skillValues[\"damageValues\"][\"enemy max hp\"] += enemy.hp * (multiplier / 100);\r\n    }\r\n    else if (skill.emhpScale[2] === \"bAd\") {\r\n      const times = bonusAd / skill.emhpScale[1];\r\n      const multiplier = skill.emhpScale[0] * times;\r\n      skillValues[\"damageValues\"][\"enemy max hp\"] += enemy.hp * (multiplier / 100);\r\n    }\r\n  }\r\n\r\n  if (skill.cd !== undefined) {\r\n    if (skill.cd[0].length === 5 || skill.cd[0].length === 3){\r\n      skillValues[\"cooldown\"] = skill.cd[0][skillLv];\r\n    }\r\n    else if (skill.cd[0].length === 1) {\r\n      skillValues[\"cooldown\"] = skill.cd[0][0];\r\n    }\r\n    else if (skill.cd[0].length === 2) {\r\n      skillValues[\"cooldown\"] = skill.cd[0][0];\r\n    }\r\n\r\n    if (skill.cd[2] === undefined || skill.cd[2] !== \"static\"){\r\n      skillValues[\"cooldown\"] = skillValues[\"cooldown\"] * (100/(100+ally.abilityHaste))\r\n    }\r\n  }\r\n  \r\n  if (skill.base !== undefined) {\r\n    skillValues[\"damageValues\"][\"base\"] = (skill.type === \"damage\" || skill.type === \"shield\" || skill.type === \"heal\") && typeof skill.base[skillLv] === \"number\" ? skill.base[skillLv] : 0;\r\n  }\r\n  else {\r\n    skillValues[\"damageValues\"][\"base\"] = 0;\r\n  }\r\n\r\n\r\n  let totalDamage = skillValues[\"damageValues\"][\"base\"] + skillValues[\"damageValues\"][\"level\"] + skillValues[\"damageValues\"][\"ap\"] + skillValues[\"damageValues\"][\"ad\"] + skillValues[\"damageValues\"][\"bonus ad\"] + skillValues[\"damageValues\"][\"max hp\"] + skillValues[\"damageValues\"][\"enemy max hp\"];\r\n\r\n  skillValues[\"totalDamage\"] = totalDamage;\r\n  \r\n  if (skill.type === \"damage\" || skill.damage !== undefined){\r\n    skillValues[\"finalDamage\"] = calculateDamage(totalDamage, skill.damage, ally, enemy);\r\n    skillValues[\"percentage\"] = skillValues[\"finalDamage\"] / enemy.hp * 100;\r\n  }\r\n  else if (skill.type === \"heal\" || skill.type === \"shield\"){\r\n    skillValues[\"finalDamage\"] = totalDamage;\r\n    skillValues[\"percentage\"] = skillValues[\"finalDamage\"] / ally.hp * 100;\r\n  }\r\n  else {\r\n    skillValues[\"finalDamage\"] = 0;\r\n    skillValues[\"percentage\"] = 0;\r\n  }\r\n\r\n  return skillValues;\r\n}\r\n","C:\\Users\\me\\Desktop\\git repos\\lolcalculator\\src\\components\\skilleditor\\skilleditor.js",[],{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":2,"column":9,"nodeType":"121","messageId":"122","endLine":2,"endColumn":18},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'ItemsData' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]